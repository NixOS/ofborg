# Generated by carnix 0.10.0: carnix generate-nix --src .
{ lib, buildPlatform, buildRustCrate, buildRustCrateHelpers, cratesIO, fetchgit }:
with buildRustCrateHelpers;
let inherit (lib.lists) fold;
    inherit (lib.attrsets) recursiveUpdate;
in
rec {
  crates = cratesIO // rec {
# amqp-0.1.0

    crates.amqp."0.1.0" = deps: { features?(features_.amqp."0.1.0" deps {}) }: buildRustCrate {
      crateName = "amqp";
      version = "0.1.0";
      description = "AMQP/RabbitMQ protocol client";
      authors = [ "Andrii Dmytrenko <andrey@reevoo.com>" ];
      src = fetchgit {
         url = "https://github.com/grahamc/rust-amqp.git";
         rev = "f9aec2f40aef69a459f26003ce47048f8e2a08d1";
         sha256 = "09k6fl7l0rcwilnckdfv3smiv1ilrwi1jxmrrkjwbrj64lky3jdy";
         fetchSubmodules = false;
      };
      dependencies = mapFeatures features ([
        (cratesIO.crates."amq_proto"."${deps."amqp"."0.1.0"."amq_proto"}" deps)
        (cratesIO.crates."env_logger"."${deps."amqp"."0.1.0"."env_logger"}" deps)
        (cratesIO.crates."log"."${deps."amqp"."0.1.0"."log"}" deps)
        (cratesIO.crates."time"."${deps."amqp"."0.1.0"."time"}" deps)
        (cratesIO.crates."url"."${deps."amqp"."0.1.0"."url"}" deps)
      ]
        ++ (if features.amqp."0.1.0".openssl or false then [ (cratesIO.crates.openssl."${deps."amqp"."0.1.0".openssl}" deps) ] else []));
      features = mkFeatures (features."amqp"."0.1.0" or {});
    };
    features_.amqp."0.1.0" = deps: f: updateFeatures f (rec {
      amq_proto."${deps.amqp."0.1.0".amq_proto}".default = true;
      amqp = fold recursiveUpdate {} [
        { "0.1.0"."openssl" =
          (f.amqp."0.1.0"."openssl" or false) ||
          (f.amqp."0.1.0".tls or false) ||
          (amqp."0.1.0"."tls" or false); }
        { "0.1.0"."tls" =
          (f.amqp."0.1.0"."tls" or false) ||
          (f.amqp."0.1.0".default or false) ||
          (amqp."0.1.0"."default" or false); }
        { "0.1.0".default = (f.amqp."0.1.0".default or true); }
      ];
      env_logger."${deps.amqp."0.1.0".env_logger}".default = true;
      log."${deps.amqp."0.1.0".log}".default = true;
      openssl."${deps.amqp."0.1.0".openssl}".default = true;
      time."${deps.amqp."0.1.0".time}".default = true;
      url."${deps.amqp."0.1.0".url}".default = true;
    }) [
      (cratesIO.features_.amq_proto."${deps."amqp"."0.1.0"."amq_proto"}" deps)
      (cratesIO.features_.env_logger."${deps."amqp"."0.1.0"."env_logger"}" deps)
      (cratesIO.features_.log."${deps."amqp"."0.1.0"."log"}" deps)
      (cratesIO.features_.openssl."${deps."amqp"."0.1.0"."openssl"}" deps)
      (cratesIO.features_.time."${deps."amqp"."0.1.0"."time"}" deps)
      (cratesIO.features_.url."${deps."amqp"."0.1.0"."url"}" deps)
    ];


# end
# hubcaps-0.3.16

    crates.hubcaps."0.3.16" = deps: { features?(features_.hubcaps."0.3.16" deps {}) }: buildRustCrate {
      crateName = "hubcaps";
      version = "0.3.16";
      description = "Rust interface for Github";
      authors = [ "softprops <d.tangren@gmail.com>" ];
      src = fetchgit {
         url = "https://github.com/grahamc/hubcaps.git";
         rev = "5e656ba35ab4ee74aa72b3b5c3a62e1bf351ff6a";
         sha256 = "1p7rn8y71fjwfag65437gz7a56pysz9n69smaknvblyxpjdzmh4d";
         fetchSubmodules = false;
      };
      dependencies = mapFeatures features ([
        (cratesIO.crates."error_chain"."${deps."hubcaps"."0.3.16"."error_chain"}" deps)
        (cratesIO.crates."frank_jwt"."${deps."hubcaps"."0.3.16"."frank_jwt"}" deps)
        (cratesIO.crates."hyper"."${deps."hubcaps"."0.3.16"."hyper"}" deps)
        (cratesIO.crates."log"."${deps."hubcaps"."0.3.16"."log"}" deps)
        (cratesIO.crates."serde"."${deps."hubcaps"."0.3.16"."serde"}" deps)
        (cratesIO.crates."serde_derive"."${deps."hubcaps"."0.3.16"."serde_derive"}" deps)
        (cratesIO.crates."serde_json"."${deps."hubcaps"."0.3.16"."serde_json"}" deps)
        (cratesIO.crates."url"."${deps."hubcaps"."0.3.16"."url"}" deps)
      ]);
    };
    features_.hubcaps."0.3.16" = deps: f: updateFeatures f (rec {
      error_chain."${deps.hubcaps."0.3.16".error_chain}".default = true;
      frank_jwt."${deps.hubcaps."0.3.16".frank_jwt}".default = true;
      hubcaps."0.3.16".default = (f.hubcaps."0.3.16".default or true);
      hyper."${deps.hubcaps."0.3.16".hyper}".default = true;
      log."${deps.hubcaps."0.3.16".log}".default = true;
      serde."${deps.hubcaps."0.3.16".serde}".default = true;
      serde_derive."${deps.hubcaps."0.3.16".serde_derive}".default = true;
      serde_json."${deps.hubcaps."0.3.16".serde_json}".default = true;
      url."${deps.hubcaps."0.3.16".url}".default = true;
    }) [
      (cratesIO.features_.error_chain."${deps."hubcaps"."0.3.16"."error_chain"}" deps)
      (cratesIO.features_.frank_jwt."${deps."hubcaps"."0.3.16"."frank_jwt"}" deps)
      (cratesIO.features_.hyper."${deps."hubcaps"."0.3.16"."hyper"}" deps)
      (cratesIO.features_.log."${deps."hubcaps"."0.3.16"."log"}" deps)
      (cratesIO.features_.serde."${deps."hubcaps"."0.3.16"."serde"}" deps)
      (cratesIO.features_.serde_derive."${deps."hubcaps"."0.3.16"."serde_derive"}" deps)
      (cratesIO.features_.serde_json."${deps."hubcaps"."0.3.16"."serde_json"}" deps)
      (cratesIO.features_.url."${deps."hubcaps"."0.3.16"."url"}" deps)
    ];


# end
# ofborg-0.1.9

    crates.ofborg."0.1.9" = deps: { features?(features_.ofborg."0.1.9" deps {}) }: buildRustCrate {
      crateName = "ofborg";
      version = "0.1.9";
      authors = [ "Graham Christensen <graham@grahamc.com>" ];
      edition = "2018";
      src = include [ "Cargo.toml" "ofborg" ] ./.;
      workspace_member = "ofborg";
      build = "build.rs";
      dependencies = mapFeatures features ([
        (crates."amqp"."${deps."ofborg"."0.1.9"."amqp"}" deps)
        (cratesIO.crates."async_std"."${deps."ofborg"."0.1.9"."async_std"}" deps)
        (cratesIO.crates."chrono"."${deps."ofborg"."0.1.9"."chrono"}" deps)
        (cratesIO.crates."either"."${deps."ofborg"."0.1.9"."either"}" deps)
        (cratesIO.crates."fs2"."${deps."ofborg"."0.1.9"."fs2"}" deps)
        (crates."hubcaps"."${deps."ofborg"."0.1.9"."hubcaps"}" deps)
        (cratesIO.crates."hyper"."${deps."ofborg"."0.1.9"."hyper"}" deps)
        (cratesIO.crates."hyper_native_tls"."${deps."ofborg"."0.1.9"."hyper_native_tls"}" deps)
        (cratesIO.crates."lapin"."${deps."ofborg"."0.1.9"."lapin"}" deps)
        (cratesIO.crates."lru_cache"."${deps."ofborg"."0.1.9"."lru_cache"}" deps)
        (cratesIO.crates."md5"."${deps."ofborg"."0.1.9"."md5"}" deps)
        (cratesIO.crates."nom"."${deps."ofborg"."0.1.9"."nom"}" deps)
        (cratesIO.crates."separator"."${deps."ofborg"."0.1.9"."separator"}" deps)
        (cratesIO.crates."serde"."${deps."ofborg"."0.1.9"."serde"}" deps)
        (cratesIO.crates."serde_derive"."${deps."ofborg"."0.1.9"."serde_derive"}" deps)
        (cratesIO.crates."serde_json"."${deps."ofborg"."0.1.9"."serde_json"}" deps)
        (cratesIO.crates."sys_info"."${deps."ofborg"."0.1.9"."sys_info"}" deps)
        (cratesIO.crates."tempfile"."${deps."ofborg"."0.1.9"."tempfile"}" deps)
        (cratesIO.crates."tracing"."${deps."ofborg"."0.1.9"."tracing"}" deps)
        (cratesIO.crates."tracing_subscriber"."${deps."ofborg"."0.1.9"."tracing_subscriber"}" deps)
        (cratesIO.crates."uuid"."${deps."ofborg"."0.1.9"."uuid"}" deps)
      ]);
    };
    features_.ofborg."0.1.9" = deps: f: updateFeatures f (rec {
      amqp."${deps.ofborg."0.1.9".amqp}".default = true;
      async_std."${deps.ofborg."0.1.9".async_std}".default = true;
      chrono."${deps.ofborg."0.1.9".chrono}".default = true;
      either."${deps.ofborg."0.1.9".either}".default = true;
      fs2."${deps.ofborg."0.1.9".fs2}".default = true;
      hubcaps."${deps.ofborg."0.1.9".hubcaps}".default = true;
      hyper."${deps.ofborg."0.1.9".hyper}".default = true;
      hyper_native_tls."${deps.ofborg."0.1.9".hyper_native_tls}".default = true;
      lapin."${deps.ofborg."0.1.9".lapin}".default = true;
      lru_cache."${deps.ofborg."0.1.9".lru_cache}".default = true;
      md5."${deps.ofborg."0.1.9".md5}".default = true;
      nom."${deps.ofborg."0.1.9".nom}".default = true;
      ofborg."0.1.9".default = (f.ofborg."0.1.9".default or true);
      separator."${deps.ofborg."0.1.9".separator}".default = true;
      serde."${deps.ofborg."0.1.9".serde}".default = true;
      serde_derive."${deps.ofborg."0.1.9".serde_derive}".default = true;
      serde_json."${deps.ofborg."0.1.9".serde_json}".default = true;
      sys_info."${deps.ofborg."0.1.9".sys_info}".default = true;
      tempfile."${deps.ofborg."0.1.9".tempfile}".default = true;
      tracing."${deps.ofborg."0.1.9".tracing}".default = true;
      tracing_subscriber = fold recursiveUpdate {} [
        { "${deps.ofborg."0.1.9".tracing_subscriber}"."json" = true; }
        { "${deps.ofborg."0.1.9".tracing_subscriber}".default = true; }
      ];
      uuid = fold recursiveUpdate {} [
        { "${deps.ofborg."0.1.9".uuid}"."v4" = true; }
        { "${deps.ofborg."0.1.9".uuid}".default = true; }
      ];
    }) [
      (features_.amqp."${deps."ofborg"."0.1.9"."amqp"}" deps)
      (cratesIO.features_.async_std."${deps."ofborg"."0.1.9"."async_std"}" deps)
      (cratesIO.features_.chrono."${deps."ofborg"."0.1.9"."chrono"}" deps)
      (cratesIO.features_.either."${deps."ofborg"."0.1.9"."either"}" deps)
      (cratesIO.features_.fs2."${deps."ofborg"."0.1.9"."fs2"}" deps)
      (features_.hubcaps."${deps."ofborg"."0.1.9"."hubcaps"}" deps)
      (cratesIO.features_.hyper."${deps."ofborg"."0.1.9"."hyper"}" deps)
      (cratesIO.features_.hyper_native_tls."${deps."ofborg"."0.1.9"."hyper_native_tls"}" deps)
      (cratesIO.features_.lapin."${deps."ofborg"."0.1.9"."lapin"}" deps)
      (cratesIO.features_.lru_cache."${deps."ofborg"."0.1.9"."lru_cache"}" deps)
      (cratesIO.features_.md5."${deps."ofborg"."0.1.9"."md5"}" deps)
      (cratesIO.features_.nom."${deps."ofborg"."0.1.9"."nom"}" deps)
      (cratesIO.features_.separator."${deps."ofborg"."0.1.9"."separator"}" deps)
      (cratesIO.features_.serde."${deps."ofborg"."0.1.9"."serde"}" deps)
      (cratesIO.features_.serde_derive."${deps."ofborg"."0.1.9"."serde_derive"}" deps)
      (cratesIO.features_.serde_json."${deps."ofborg"."0.1.9"."serde_json"}" deps)
      (cratesIO.features_.sys_info."${deps."ofborg"."0.1.9"."sys_info"}" deps)
      (cratesIO.features_.tempfile."${deps."ofborg"."0.1.9"."tempfile"}" deps)
      (cratesIO.features_.tracing."${deps."ofborg"."0.1.9"."tracing"}" deps)
      (cratesIO.features_.tracing_subscriber."${deps."ofborg"."0.1.9"."tracing_subscriber"}" deps)
      (cratesIO.features_.uuid."${deps."ofborg"."0.1.9"."uuid"}" deps)
    ];


# end
# ofborg-simple-build-0.1.0

    crates.ofborg_simple_build."0.1.0" = deps: { features?(features_.ofborg_simple_build."0.1.0" deps {}) }: buildRustCrate {
      crateName = "ofborg-simple-build";
      version = "0.1.0";
      authors = [ "Daiderd Jordan <daiderd@gmail.com>" ];
      edition = "2018";
      src = include [ "Cargo.toml" "ofborg-simple-build" ] ./.;
      workspace_member = "ofborg-simple-build";
      dependencies = mapFeatures features ([
        (cratesIO.crates."log"."${deps."ofborg_simple_build"."0.1.0"."log"}" deps)
        (crates."ofborg"."${deps."ofborg_simple_build"."0.1.0"."ofborg"}" deps)
      ]);
    };
    features_.ofborg_simple_build."0.1.0" = deps: f: updateFeatures f (rec {
      log."${deps.ofborg_simple_build."0.1.0".log}".default = true;
      ofborg."${deps.ofborg_simple_build."0.1.0".ofborg}".default = true;
      ofborg_simple_build."0.1.0".default = (f.ofborg_simple_build."0.1.0".default or true);
    }) [
      (cratesIO.features_.log."${deps."ofborg_simple_build"."0.1.0"."log"}" deps)
      (features_.ofborg."${deps."ofborg_simple_build"."0.1.0"."ofborg"}" deps)
    ];


# end

  };

  ofborg = crates.crates.ofborg."0.1.9" deps;
  ofborg_simple_build = crates.crates.ofborg_simple_build."0.1.0" deps;
  __all = [ (ofborg {}) (ofborg_simple_build {}) ];
  deps.aho_corasick."0.5.3" = {
    memchr = "0.1.11";
  };
  deps.aho_corasick."0.7.10" = {
    memchr = "2.3.3";
  };
  deps.amq_proto."0.1.0" = {
    bit_vec = "0.4.4";
    byteorder = "0.5.3";
    enum_primitive = "0.1.1";
    env_logger = "0.3.5";
    error_chain = "0.10.0";
    log = "0.3.8";
  };
  deps.amq_protocol."6.0.0-rc7" = {
    amq_protocol_tcp = "6.0.0-rc7";
    amq_protocol_types = "6.0.0-rc7";
    amq_protocol_uri = "6.0.0-rc7";
    cookie_factory = "0.3.1";
    nom = "6.0.0-alpha1";
    amq_protocol_codegen = "6.0.0-rc7";
  };
  deps.amq_protocol_codegen."6.0.0-rc7" = {
    amq_protocol_types = "6.0.0-rc7";
    handlebars = "3.0.1";
    serde = "1.0.106";
    serde_json = "1.0.52";
  };
  deps.amq_protocol_tcp."6.0.0-rc7" = {
    amq_protocol_uri = "6.0.0-rc7";
    log = "0.4.8";
    tcp_stream = "0.19.1";
  };
  deps.amq_protocol_types."6.0.0-rc7" = {
    cookie_factory = "0.3.1";
    nom = "6.0.0-alpha1";
    serde = "1.0.106";
    serde_json = "1.0.52";
  };
  deps.amq_protocol_uri."6.0.0-rc7" = {
    percent_encoding = "2.1.0";
    url = "2.1.1";
  };
  deps.amqp."0.1.0" = {
    amq_proto = "0.1.0";
    env_logger = "0.3.5";
    log = "0.3.8";
    openssl = "0.9.24";
    time = "0.1.41";
    url = "1.7.2";
  };
  deps.ansi_term."0.11.0" = {
    winapi = "0.3.8";
  };
  deps.antidote."1.0.0" = {};
  deps.arrayvec."0.5.1" = {};
  deps.async_std."1.5.0" = {
    async_task = "1.3.1";
    crossbeam_channel = "0.4.2";
    crossbeam_deque = "0.7.3";
    crossbeam_utils = "0.7.2";
    futures_core = "0.3.4";
    futures_io = "0.3.4";
    futures_timer = "2.0.2";
    kv_log_macro = "1.0.4";
    log = "0.4.8";
    memchr = "2.3.3";
    mio = "0.6.21";
    mio_uds = "0.6.7";
    num_cpus = "1.13.0";
    once_cell = "1.3.1";
    pin_project_lite = "0.1.4";
    pin_utils = "0.1.0";
    slab = "0.4.2";
  };
  deps.async_task."1.3.1" = {
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.async_task."3.0.0" = {};
  deps.autocfg."0.1.1" = {};
  deps.autocfg."1.0.0" = {};
  deps.backtrace."0.3.13" = {
    cfg_if = "0.1.10";
    rustc_demangle = "0.1.13";
    autocfg = "0.1.1";
    backtrace_sys = "0.1.28";
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.backtrace_sys."0.1.28" = {
    libc = "0.2.69";
    cc = "1.0.28";
  };
  deps.base64."0.9.3" = {
    byteorder = "1.2.7";
    safemem = "0.3.0";
  };
  deps.base64."0.10.0" = {
    byteorder = "1.2.7";
  };
  deps.base64."0.11.0" = {};
  deps.bit_vec."0.4.4" = {};
  deps.bitflags."0.9.1" = {};
  deps.bitflags."1.2.1" = {};
  deps.block_buffer."0.7.3" = {
    block_padding = "0.1.5";
    byte_tools = "0.3.1";
    byteorder = "1.2.7";
    generic_array = "0.12.3";
  };
  deps.block_padding."0.1.5" = {
    byte_tools = "0.3.1";
  };
  deps.byte_tools."0.3.1" = {};
  deps.byteorder."0.5.3" = {};
  deps.byteorder."1.2.7" = {};
  deps.cc."1.0.28" = {};
  deps.cfg_if."0.1.10" = {};
  deps.chrono."0.4.6" = {
    num_integer = "0.1.39";
    num_traits = "0.2.6";
    time = "0.1.41";
  };
  deps.cloudabi."0.0.3" = {
    bitflags = "1.2.1";
  };
  deps.cookie_factory."0.3.1" = {};
  deps.core_foundation."0.2.3" = {
    core_foundation_sys = "0.2.3";
    libc = "0.2.69";
  };
  deps.core_foundation."0.7.0" = {
    core_foundation_sys = "0.7.0";
    libc = "0.2.69";
  };
  deps.core_foundation_sys."0.2.3" = {
    libc = "0.2.69";
  };
  deps.core_foundation_sys."0.7.0" = {};
  deps.crossbeam_channel."0.4.2" = {
    crossbeam_utils = "0.7.2";
    maybe_uninit = "2.0.0";
  };
  deps.crossbeam_deque."0.7.3" = {
    crossbeam_epoch = "0.8.2";
    crossbeam_utils = "0.7.2";
    maybe_uninit = "2.0.0";
  };
  deps.crossbeam_epoch."0.8.2" = {
    cfg_if = "0.1.10";
    crossbeam_utils = "0.7.2";
    lazy_static = "1.4.0";
    maybe_uninit = "2.0.0";
    memoffset = "0.5.4";
    scopeguard = "1.1.0";
    autocfg = "1.0.0";
  };
  deps.crossbeam_utils."0.7.2" = {
    cfg_if = "0.1.10";
    lazy_static = "1.4.0";
    autocfg = "1.0.0";
  };
  deps.digest."0.8.1" = {
    generic_array = "0.12.3";
  };
  deps.doc_comment."0.3.3" = {};
  deps.either."1.5.0" = {};
  deps.enum_primitive."0.1.1" = {
    num_traits = "0.1.43";
  };
  deps.env_logger."0.3.5" = {
    log = "0.3.8";
    regex = "0.1.80";
  };
  deps.error_chain."0.10.0" = {
    backtrace = "0.3.13";
  };
  deps.fake_simd."0.1.2" = {};
  deps.foreign_types."0.3.2" = {
    foreign_types_shared = "0.1.1";
  };
  deps.foreign_types_shared."0.1.1" = {};
  deps.frank_jwt."3.1.0" = {
    base64 = "0.10.0";
    openssl = "0.10.29";
    serde = "1.0.106";
    serde_json = "1.0.52";
  };
  deps.fs2."0.4.3" = {
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.fuchsia_zircon."0.3.3" = {
    bitflags = "1.2.1";
    fuchsia_zircon_sys = "0.3.3";
  };
  deps.fuchsia_zircon_sys."0.3.3" = {};
  deps.futures_core."0.3.4" = {};
  deps.futures_io."0.3.4" = {};
  deps.futures_timer."2.0.2" = {};
  deps.generic_array."0.12.3" = {
    typenum = "1.12.0";
  };
  deps.getrandom."0.1.14" = {
    cfg_if = "0.1.10";
    wasi = "0.9.0+wasi-snapshot-preview1";
    libc = "0.2.69";
  };
  deps.handlebars."3.0.1" = {
    log = "0.4.8";
    pest = "2.1.3";
    pest_derive = "2.1.0";
    quick_error = "1.2.3";
    serde = "1.0.106";
    serde_json = "1.0.52";
  };
  deps.hermit_abi."0.1.12" = {
    libc = "0.2.69";
  };
  deps.httparse."1.3.3" = {};
  deps.hubcaps."0.3.16" = {
    error_chain = "0.10.0";
    frank_jwt = "3.1.0";
    hyper = "0.10.15";
    log = "0.3.8";
    serde = "1.0.106";
    serde_derive = "1.0.106";
    serde_json = "1.0.52";
    url = "1.7.2";
  };
  deps.hyper."0.10.15" = {
    base64 = "0.9.3";
    httparse = "1.3.3";
    language_tags = "0.2.2";
    log = "0.3.8";
    mime = "0.2.6";
    num_cpus = "1.13.0";
    time = "0.1.41";
    traitobject = "0.1.0";
    typeable = "0.1.2";
    unicase = "1.4.2";
    url = "1.7.2";
  };
  deps.hyper_native_tls."0.2.4" = {
    antidote = "1.0.0";
    hyper = "0.10.15";
    native_tls = "0.1.5";
  };
  deps.idna."0.1.5" = {
    matches = "0.1.8";
    unicode_bidi = "0.3.4";
    unicode_normalization = "0.1.7";
  };
  deps.idna."0.2.0" = {
    matches = "0.1.8";
    unicode_bidi = "0.3.4";
    unicode_normalization = "0.1.7";
  };
  deps.iovec."0.1.4" = {
    libc = "0.2.69";
  };
  deps.itoa."0.4.3" = {};
  deps.kernel32_sys."0.2.2" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
  deps.kv_log_macro."1.0.4" = {
    log = "0.4.8";
  };
  deps.language_tags."0.2.2" = {};
  deps.lapin."1.0.0-rc6" = {
    amq_protocol = "6.0.0-rc7";
    async_task = "3.0.0";
    crossbeam_channel = "0.4.2";
    futures_core = "0.3.4";
    log = "0.4.8";
    mio = "0.7.0";
    parking_lot = "0.10.2";
    pinky_swear = "4.0.0";
    amq_protocol_codegen = "6.0.0-rc7";
    serde_json = "1.0.52";
  };
  deps.lazy_static."0.2.11" = {};
  deps.lazy_static."1.4.0" = {};
  deps.lexical_core."0.7.4" = {
    arrayvec = "0.5.1";
    bitflags = "1.2.1";
    cfg_if = "0.1.10";
    ryu = "1.0.4";
    static_assertions = "1.1.0";
  };
  deps.libc."0.2.69" = {};
  deps.linked_hash_map."0.4.2" = {};
  deps.lock_api."0.3.4" = {
    scopeguard = "1.1.0";
  };
  deps.log."0.3.8" = {};
  deps.log."0.4.8" = {
    cfg_if = "0.1.10";
  };
  deps.lru_cache."0.1.1" = {
    linked_hash_map = "0.4.2";
  };
  deps.maplit."1.0.2" = {};
  deps.matchers."0.0.1" = {
    regex_automata = "0.1.9";
  };
  deps.matches."0.1.8" = {};
  deps.maybe_uninit."2.0.0" = {};
  deps.md5."0.3.8" = {};
  deps.memchr."0.1.11" = {
    libc = "0.2.69";
  };
  deps.memchr."2.3.3" = {};
  deps.memoffset."0.5.4" = {
    autocfg = "1.0.0";
  };
  deps.mime."0.2.6" = {
    log = "0.3.8";
  };
  deps.mio."0.6.21" = {
    cfg_if = "0.1.10";
    iovec = "0.1.4";
    log = "0.4.8";
    net2 = "0.2.33";
    slab = "0.4.2";
    fuchsia_zircon = "0.3.3";
    fuchsia_zircon_sys = "0.3.3";
    libc = "0.2.69";
    kernel32_sys = "0.2.2";
    miow = "0.2.1";
    winapi = "0.2.8";
  };
  deps.mio."0.7.0" = {
    log = "0.4.8";
    libc = "0.2.69";
    lazy_static = "1.4.0";
    miow = "0.3.3";
    ntapi = "0.3.3";
    winapi = "0.3.8";
  };
  deps.mio_uds."0.6.7" = {
    iovec = "0.1.4";
    libc = "0.2.69";
    mio = "0.6.21";
  };
  deps.miow."0.2.1" = {
    kernel32_sys = "0.2.2";
    net2 = "0.2.33";
    winapi = "0.2.8";
    ws2_32_sys = "0.2.1";
  };
  deps.miow."0.3.3" = {
    socket2 = "0.3.12";
    winapi = "0.3.8";
  };
  deps.native_tls."0.1.5" = {
    lazy_static = "0.2.11";
    libc = "0.2.69";
    security_framework = "0.1.16";
    security_framework_sys = "0.1.16";
    tempdir = "0.3.7";
    openssl = "0.9.24";
    schannel = "0.1.18";
  };
  deps.native_tls."0.2.4" = {
    lazy_static = "1.4.0";
    libc = "0.2.69";
    security_framework = "0.4.3";
    security_framework_sys = "0.4.3";
    tempfile = "3.1.0";
    log = "0.4.8";
    openssl = "0.10.29";
    openssl_probe = "0.1.2";
    openssl_sys = "0.9.55";
    schannel = "0.1.18";
  };
  deps.net2."0.2.33" = {
    cfg_if = "0.1.10";
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.nom."4.1.1" = {
    memchr = "2.3.3";
  };
  deps.nom."6.0.0-alpha1" = {
    lexical_core = "0.7.4";
    memchr = "2.3.3";
    version_check = "0.9.1";
  };
  deps.ntapi."0.3.3" = {
    winapi = "0.3.8";
  };
  deps.num_integer."0.1.39" = {
    num_traits = "0.2.6";
  };
  deps.num_traits."0.1.43" = {
    num_traits = "0.2.6";
  };
  deps.num_traits."0.2.6" = {};
  deps.num_cpus."1.13.0" = {
    libc = "0.2.69";
    hermit_abi = "0.1.12";
  };
  deps.ofborg."0.1.9" = {
    amqp = "0.1.0";
    async_std = "1.5.0";
    chrono = "0.4.6";
    either = "1.5.0";
    fs2 = "0.4.3";
    hubcaps = "0.3.16";
    hyper = "0.10.15";
    hyper_native_tls = "0.2.4";
    lapin = "1.0.0-rc6";
    lru_cache = "0.1.1";
    md5 = "0.3.8";
    nom = "4.1.1";
    separator = "0.4.1";
    serde = "1.0.106";
    serde_derive = "1.0.106";
    serde_json = "1.0.52";
    sys_info = "0.5.6";
    tempfile = "2.2.0";
    tracing = "0.1.13";
    tracing_subscriber = "0.2.5";
    uuid = "0.4.0";
  };
  deps.ofborg_simple_build."0.1.0" = {
    log = "0.3.8";
    ofborg = "0.1.9";
  };
  deps.once_cell."1.3.1" = {};
  deps.opaque_debug."0.2.3" = {};
  deps.openssl."0.9.24" = {
    bitflags = "0.9.1";
    foreign_types = "0.3.2";
    lazy_static = "1.4.0";
    libc = "0.2.69";
    openssl_sys = "0.9.55";
  };
  deps.openssl."0.10.29" = {
    bitflags = "1.2.1";
    cfg_if = "0.1.10";
    foreign_types = "0.3.2";
    lazy_static = "1.4.0";
    libc = "0.2.69";
    openssl_sys = "0.9.55";
  };
  deps.openssl_probe."0.1.2" = {};
  deps.openssl_sys."0.9.55" = {
    libc = "0.2.69";
    autocfg = "1.0.0";
    cc = "1.0.28";
    pkg_config = "0.3.14";
  };
  deps.parking_lot."0.10.2" = {
    lock_api = "0.3.4";
    parking_lot_core = "0.7.2";
  };
  deps.parking_lot_core."0.7.2" = {
    cfg_if = "0.1.10";
    smallvec = "1.4.0";
    cloudabi = "0.0.3";
    redox_syscall = "0.1.50";
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.pem."0.7.0" = {
    base64 = "0.11.0";
    lazy_static = "1.4.0";
    regex = "1.3.7";
  };
  deps.percent_encoding."1.0.1" = {};
  deps.percent_encoding."2.1.0" = {};
  deps.pest."2.1.3" = {
    ucd_trie = "0.1.3";
  };
  deps.pest_derive."2.1.0" = {
    pest = "2.1.3";
    pest_generator = "2.1.3";
  };
  deps.pest_generator."2.1.3" = {
    pest = "2.1.3";
    pest_meta = "2.1.3";
    proc_macro2 = "1.0.10";
    quote = "1.0.3";
    syn = "1.0.18";
  };
  deps.pest_meta."2.1.3" = {
    maplit = "1.0.2";
    pest = "2.1.3";
    sha_1 = "0.8.2";
  };
  deps.pin_project_lite."0.1.4" = {};
  deps.pin_utils."0.1.0" = {};
  deps.pinky_swear."4.0.0" = {
    doc_comment = "0.3.3";
    log = "0.4.8";
    parking_lot = "0.10.2";
  };
  deps.pkg_config."0.3.14" = {};
  deps.ppv_lite86."0.2.6" = {};
  deps.proc_macro2."1.0.10" = {
    unicode_xid = "0.2.0";
  };
  deps.quick_error."1.2.3" = {};
  deps.quote."1.0.3" = {
    proc_macro2 = "1.0.10";
  };
  deps.rand."0.3.22" = {
    libc = "0.2.69";
    rand = "0.4.3";
    fuchsia_zircon = "0.3.3";
  };
  deps.rand."0.4.3" = {
    fuchsia_zircon = "0.3.3";
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.rand."0.7.3" = {
    rand_core = "0.5.1";
    rand_chacha = "0.2.2";
    rand_hc = "0.2.0";
    libc = "0.2.69";
  };
  deps.rand_chacha."0.2.2" = {
    ppv_lite86 = "0.2.6";
    rand_core = "0.5.1";
  };
  deps.rand_core."0.5.1" = {
    getrandom = "0.1.14";
  };
  deps.rand_hc."0.2.0" = {
    rand_core = "0.5.1";
  };
  deps.redox_syscall."0.1.50" = {};
  deps.regex."0.1.80" = {
    aho_corasick = "0.5.3";
    memchr = "0.1.11";
    regex_syntax = "0.3.9";
    thread_local = "0.2.7";
    utf8_ranges = "0.1.3";
  };
  deps.regex."1.3.7" = {
    aho_corasick = "0.7.10";
    memchr = "2.3.3";
    regex_syntax = "0.6.17";
    thread_local = "1.0.1";
  };
  deps.regex_automata."0.1.9" = {
    byteorder = "1.2.7";
    regex_syntax = "0.6.17";
  };
  deps.regex_syntax."0.3.9" = {};
  deps.regex_syntax."0.6.17" = {};
  deps.remove_dir_all."0.5.1" = {
    winapi = "0.3.8";
  };
  deps.rustc_demangle."0.1.13" = {};
  deps.ryu."1.0.4" = {};
  deps.safemem."0.3.0" = {};
  deps.schannel."0.1.18" = {
    lazy_static = "1.4.0";
    winapi = "0.3.8";
  };
  deps.scopeguard."1.1.0" = {};
  deps.security_framework."0.1.16" = {
    core_foundation = "0.2.3";
    core_foundation_sys = "0.2.3";
    libc = "0.2.69";
    security_framework_sys = "0.1.16";
  };
  deps.security_framework."0.4.3" = {
    bitflags = "1.2.1";
    core_foundation = "0.7.0";
    core_foundation_sys = "0.7.0";
    libc = "0.2.69";
    security_framework_sys = "0.4.3";
  };
  deps.security_framework_sys."0.1.16" = {
    core_foundation_sys = "0.2.3";
    libc = "0.2.69";
  };
  deps.security_framework_sys."0.4.3" = {
    core_foundation_sys = "0.7.0";
    libc = "0.2.69";
  };
  deps.separator."0.4.1" = {};
  deps.serde."1.0.106" = {
    serde_derive = "1.0.106";
  };
  deps.serde_derive."1.0.106" = {
    proc_macro2 = "1.0.10";
    quote = "1.0.3";
    syn = "1.0.18";
  };
  deps.serde_json."1.0.52" = {
    itoa = "0.4.3";
    ryu = "1.0.4";
    serde = "1.0.106";
  };
  deps.sha_1."0.8.2" = {
    block_buffer = "0.7.3";
    digest = "0.8.1";
    fake_simd = "0.1.2";
    opaque_debug = "0.2.3";
  };
  deps.sharded_slab."0.0.9" = {
    lazy_static = "1.4.0";
  };
  deps.slab."0.4.2" = {};
  deps.smallvec."1.4.0" = {};
  deps.socket2."0.3.12" = {
    cfg_if = "0.1.10";
    libc = "0.2.69";
    redox_syscall = "0.1.50";
    winapi = "0.3.8";
  };
  deps.static_assertions."1.1.0" = {};
  deps.syn."1.0.18" = {
    proc_macro2 = "1.0.10";
    quote = "1.0.3";
    unicode_xid = "0.2.0";
  };
  deps.sys_info."0.5.6" = {
    libc = "0.2.69";
    cc = "1.0.28";
  };
  deps.tcp_stream."0.19.1" = {
    cfg_if = "0.1.10";
    mio = "0.7.0";
    pem = "0.7.0";
  };
  deps.tempdir."0.3.7" = {
    rand = "0.4.3";
    remove_dir_all = "0.5.1";
  };
  deps.tempfile."2.2.0" = {
    rand = "0.3.22";
    redox_syscall = "0.1.50";
    libc = "0.2.69";
    kernel32_sys = "0.2.2";
    winapi = "0.2.8";
  };
  deps.tempfile."3.1.0" = {
    cfg_if = "0.1.10";
    rand = "0.7.3";
    remove_dir_all = "0.5.1";
    redox_syscall = "0.1.50";
    libc = "0.2.69";
    winapi = "0.3.8";
  };
  deps.thread_id."2.0.0" = {
    kernel32_sys = "0.2.2";
    libc = "0.2.69";
  };
  deps.thread_local."0.2.7" = {
    thread_id = "2.0.0";
  };
  deps.thread_local."1.0.1" = {
    lazy_static = "1.4.0";
  };
  deps.time."0.1.41" = {
    libc = "0.2.69";
    redox_syscall = "0.1.50";
    winapi = "0.3.8";
  };
  deps.tracing."0.1.13" = {
    cfg_if = "0.1.10";
    tracing_attributes = "0.1.7";
    tracing_core = "0.1.10";
  };
  deps.tracing_attributes."0.1.7" = {
    quote = "1.0.3";
    syn = "1.0.18";
  };
  deps.tracing_core."0.1.10" = {
    lazy_static = "1.4.0";
  };
  deps.tracing_log."0.1.1" = {
    lazy_static = "1.4.0";
    log = "0.4.8";
    tracing_core = "0.1.10";
  };
  deps.tracing_serde."0.1.1" = {
    serde = "1.0.106";
    tracing_core = "0.1.10";
  };
  deps.tracing_subscriber."0.2.5" = {
    ansi_term = "0.11.0";
    chrono = "0.4.6";
    lazy_static = "1.4.0";
    matchers = "0.0.1";
    regex = "1.3.7";
    serde = "1.0.106";
    serde_json = "1.0.52";
    sharded_slab = "0.0.9";
    smallvec = "1.4.0";
    tracing_core = "0.1.10";
    tracing_log = "0.1.1";
    tracing_serde = "0.1.1";
  };
  deps.traitobject."0.1.0" = {};
  deps.typeable."0.1.2" = {};
  deps.typenum."1.12.0" = {};
  deps.ucd_trie."0.1.3" = {};
  deps.unicase."1.4.2" = {
    version_check = "0.1.5";
  };
  deps.unicode_bidi."0.3.4" = {
    matches = "0.1.8";
  };
  deps.unicode_normalization."0.1.7" = {};
  deps.unicode_xid."0.2.0" = {};
  deps.url."1.7.2" = {
    idna = "0.1.5";
    matches = "0.1.8";
    percent_encoding = "1.0.1";
  };
  deps.url."2.1.1" = {
    idna = "0.2.0";
    matches = "0.1.8";
    percent_encoding = "2.1.0";
  };
  deps.utf8_ranges."0.1.3" = {};
  deps.uuid."0.4.0" = {
    rand = "0.3.22";
  };
  deps.vcpkg."0.2.8" = {};
  deps.version_check."0.1.5" = {};
  deps.version_check."0.9.1" = {};
  deps.wasi."0.9.0+wasi-snapshot-preview1" = {};
  deps.winapi."0.2.8" = {};
  deps.winapi."0.3.8" = {
    winapi_i686_pc_windows_gnu = "0.4.0";
    winapi_x86_64_pc_windows_gnu = "0.4.0";
  };
  deps.winapi_build."0.1.1" = {};
  deps.winapi_i686_pc_windows_gnu."0.4.0" = {};
  deps.winapi_x86_64_pc_windows_gnu."0.4.0" = {};
  deps.ws2_32_sys."0.2.1" = {
    winapi = "0.2.8";
    winapi_build = "0.1.1";
  };
}
